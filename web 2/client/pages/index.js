import Head from 'next/head'
import dynamic from 'next/dynamic'
import { useCallback, useMemo, useState } from 'react'
import Image from 'next/image'
import { useDropzone } from 'react-dropzone'
import { Bar } from 'react-chartjs-2'
import { Chart as ChartJS } from 'chart.js/auto'
import { useRouter } from 'next/router'
import { TabView, TabPanel } from 'primereact/tabview'

import { cancer_types } from '../public/data'
import 'primereact/resources/themes/lara-light-indigo/theme.css' //theme
import 'primereact/resources/primereact.min.css' //core css
import 'primeicons/primeicons.css'
const baseStyle = {
   flex: 1,
   display: 'flex',
   flexDirection: 'column',
   alignItems: 'center',
   padding: '20px',
   borderWidth: 2,
   borderRadius: 2,
   borderColor: '#eeeeee',
   borderStyle: 'dashed',
   backgroundColor: '#fafafa',
   color: '#bdbdbd',
   outline: 'none',
   transition: 'border .24s ease-in-out',
   borderRadius: '16px',
}
const focusedStyle = {
   borderColor: '#2196f3',
}

const acceptStyle = {
   borderColor: '#00e676',
}

const rejectStyle = {
   borderColor: '#ff1744',
}

export default function Home() {
   const [files, setFiles] = useState([])
   const [image, setImage] = useState(null)
   const [progress, setProgress] = useState(0)
   const [uploadStatus, setUploadStatus] = useState(null)
   const [isPredicting, setIsPredicting] = useState()
   const [predictedValue, setPredictedValue] = useState(null)
   const [timeToFetch, setTimeToFetch] = useState(0)
   const [activeIndex, setActiveIndex] = useState(0)
   const router = useRouter()
   const ip = 'http://localhost:8000'
   if (typeof window !== 'undefined') {
      // Client-side-only code
   }
   let formData
   const onDrop = useCallback(async (acceptedFiles) => {
      // Do something with the files

      const [file] = acceptedFiles
      var formData = new FormData()
      formData.append('file', file)

      const res = await fetch(`${ip}/upload`, {
         method: 'POST',
         body: formData,
      })
      setUploadStatus(await res.json())

      setFiles(
         acceptedFiles.map((file) =>
            Object.assign(file, {
               preview: URL.createObjectURL(file),
            })
         )
      )
   }, [])

   const { getRootProps, getInputProps, isDragActive, isFocused, isDragAccept, isDragReject } = useDropzone({
      onDrop,
      multiple: false,
      // accept: { 'image/*.jpg': [] },
   })
   const style = useMemo(
      () => ({
         ...baseStyle,
         ...(isFocused ? focusedStyle : {}),
         ...(isDragAccept ? acceptStyle : {}),
         ...(isDragReject ? rejectStyle : {}),
      }),
      [isFocused, isDragAccept, isDragReject]
   )
   const predict = async () => {
      setIsPredicting(true)
      let startTime = new Date().getTime()
      const res = await fetch(`${ip}/predict`, {
         method: 'GET',
      })
      let totalTime = new Date().getTime() - startTime
      setTimeToFetch(totalTime)
      const data = await res.json()
      setIsPredicting(false)
      setPredictedValue(data?.data)
   }

   return (
      <div className=' font-Lato bg-[rgb(68,78,97)] h-screen w-full flex  justify-center items-center  flex-grow '>
         <Head>
            <title>Skin cancer detection</title>
            <meta name='description' content='Generated by create next app' />
            <link rel='icon' href='/favicon.ico' />
         </Head>
         <div className='container  px-4 py-10 w-lg max-w-lg bg-white rounded-2xl drop-shadow-xl '>
            {files.length <= 0 ? (
               <div className=' text-center'>
                  <h1 className='text-2xl mb-2'>Upload your images to classify Skin Cancer</h1>
                  <h6 className='text-sm mb-8 text-slate-500'>Only Dermatology Images are able to predict for now.</h6>
               </div>
            ) : (
               <>
                  {predictedValue ? (
                     <div className=' text-center'>
                        <h1 className=' text-2xl mb-2 text-green-700'>Prediction Successful</h1>
                     </div>
                  ) : (
                     <div className=' text-center'>
                        {uploadStatus?.error ? (
                           <h1 className=' text-2xl mb-2 text-red-700'>{uploadStatus?.data}</h1>
                        ) : (
                           <h1 className=' text-2xl mb-2 text-green-700'>{uploadStatus?.data}</h1>
                        )}
                     </div>
                  )}
               </>
            )}

            {files?.length < 1 && (
               <div>
                  <div {...getRootProps({ style })}>
                     <form encType='mutlipart/form-data'>
                        <input name='image' type='file' {...getInputProps()} />
                        {isDragActive ? (
                           <p>Drop the files here ...</p>
                        ) : (
                           <p className=' flex flex-col justify-center items-center'>
                              <svg
                                 xmlns='http://www.w3.org/2000/svg'
                                 className='icon icon-tabler icon-tabler-cloud-upload'
                                 width='84'
                                 height='84'
                                 viewBox='0 0 24 24'
                                 strokeWidth='0.5'
                                 stroke='#bdbdbd'
                                 fill='none'
                                 strokeLinecap='round'
                                 strokeLinejoin='round'
                              >
                                 <path stroke='none' d='M0 0h24v24H0z' fill='none' />
                                 <path d='M7 18a4.6 4.4 0 0 1 0 -9a5 4.5 0 0 1 11 2h1a3.5 3.5 0 0 1 0 7h-1' />
                                 <polyline points='9 15 12 12 15 15' />
                                 <line x1='12' y1='12' x2='12' y2='21' />
                              </svg>
                              {"Drag 'n' drop some files here, or click to select files"}
                           </p>
                        )}
                     </form>
                  </div>
               </div>
            )}
            <div>
               {predictedValue ? (
                  <>
                     <div className={predictedValue ? 'flex gap-4' : ''}>
                        <div className=' mt-6 w-full  rounded-2xl flex justify-center items-center'>
                           <div>
                              {files?.map((file) => (
                                 <div key={file?.name}>
                                    <div className=' flex gap-4'>
                                       <img
                                          src={file?.preview}
                                          className=' h-1/2 w-80 object-cover rounded-lg'
                                          // className={
                                          //    predictedValue
                                          //       ? '  h-1/2 w-1/2   rounded-2xl shadow-lg object-cover'
                                          //       : ' h-30 w-30   rounded-2xl shadow-lg object-cover'
                                          // }
                                          onLoad={() => {
                                             URL.revokeObjectURL(file?.preview)
                                          }}
                                       />
                                       {/* <div>
                              <p className='text-sm mt-4 text-slate-500 '>
                                 {' '}
                                 Filename: <span className=' font-bold'>{file?.name} </span>
                              </p>
                              <p className='text-sm mt-2 text-slate-500'>
                                 {' '}
                                 Size: <span className=' font-bold'>{Math.round(file?.size / 1024)} KB </span>{' '}
                              </p>
                           </div> */}
                                    </div>
                                 </div>
                              ))}
                           </div>
                        </div>
                        <div className='mt-4 mb-2  font-light  min-w-[200px]  text-sm'>
                           <h2 className=' text-lg font-bold'>Prediction Result</h2>
                           <div className=' w-full  border-[1px solid #000000]'></div>
                           <h3>
                              {' '}
                              Possible Cancer type :&nbsp; <br/>
                              <span className=' font-light '>
                                 <span className=' font-bold text-red-700 '>{predictedValue.split('#')[0]}</span>
                              </span>
                           </h3>
                           <h3>Accuracy : {<span className=' font-bold text-blue-700 '>{Math.round(predictedValue.split('#')[1])}%</span>}</h3>
                           <h3>Prediction Time :{<span className=' font-bold text-green-700 '> {timeToFetch ? timeToFetch / 1000 : null}s</span>}</h3>
                        </div>
                     </div>
                     <div className='mt-2'>
                        <TabView
                           activeIndex={activeIndex}
                           className={' bg'}
                           panelContainerStyle={{ padding: '0', height: '240px' }}
                           onTabChange={(e) => setActiveIndex(e.index)}
                        >
                           <TabPanel header='Charts'>
                              <div id='Chart' className=' mt-6'>
                                 <Bar
                                    data={{
                                       labels: [
                                          'Melanocytic nevi(nv)',
                                          'Melanoma',
                                          'Benign keratosis-like lesions',
                                          'Basal cell carcinoma',
                                          'Actinic keratoses',
                                          'Vascular lesions',
                                          'Dermatofibroma',
                                       ],
                                       datasets: [
                                          {
                                             data: [
                                                predictedValue?.split('#')[2] / 100,
                                                predictedValue?.split('#')[3] / 100,
                                                predictedValue?.split('#')[4] / 100,
                                                predictedValue?.split('#')[5] / 100,
                                                predictedValue?.split('#')[6] / 100,
                                                predictedValue?.split('#')[7] / 100,
                                                predictedValue?.split('#')[8] / 100,
                                             ],
                                             backgroundColor: [
                                                'rgba(255, 99, 132, 0.2)',
                                                'rgba(54, 162, 235, 0.2)',
                                                'rgba(255, 206, 86, 0.2)',
                                                'rgba(75, 192, 192, 0.2)',
                                                'rgba(153, 102, 255, 0.2)',
                                                'rgba(255, 159, 64, 0.2)',
                                             ],
                                             borderColor: [
                                                'rgba(255, 99, 132, 1)',
                                                'rgba(54, 162, 235, 1)',
                                                'rgba(255, 206, 86, 1)',
                                                'rgba(75, 192, 192, 1)',
                                                'rgba(153, 102, 255, 1)',
                                                'rgba(255, 159, 64, 1)',
                                             ],
                                             borderWidth: 1,
                                          },
                                       ],
                                    }}
                                    options={{
                                       scales: {
                                          x: {
                                             max: 100,
                                             min: 0,
                                             ticks: {
                                                stepSize: 10,
                                             },
                                          },
                                       },
                                       indexAxis: 'y',
                                       // Elements options apply to all of the options unless overridden in a dataset
                                       // In this case, we are setting the border of each horizontal bar to be 2px wide
                                       elements: {
                                          bar: {
                                             borderWidth: 2,
                                          },
                                       },
                                       responsive: true,
                                       plugins: {
                                          legend: {
                                             display: false,
                                          },
                                          title: {
                                             display: true,
                                             text: 'Accuracy chart of various cancer types',
                                          },
                                       },
                                    }}
                                 />
                              </div>
                           </TabPanel>
                           <TabPanel header="About">
                              <div className=' overflow-auto py-4 px-1'>

                              { `${cancer_types[predictedValue.split('#')[0]]?.info}` }
                              <a className=' text-blue-500' href={cancer_types[predictedValue.split('#')[0]]?.link}>Read More</a>
                              </div>

                           </TabPanel>
                           <TabPanel header='Symptoms'>
                              <ul>
                                 {
                                    (cancer_types[predictedValue.split('#')[0]]?.symptoms?.map((el,idx) => {
                                       return<div>

                                          <li className=' mt-2'>{`${idx + 1}. ${el}`}</li>
                                       </div>
                                    }))
                                 }
                                
                              </ul>
                           </TabPanel>
                        
                        </TabView>
                     </div>
                     <div>
                        <button
                           className=' w-full bg-blue-400 py-3 rounded-xl text-white mt-8'
                           onClick={() => {
                              router.reload(window.location.pathname)
                           }}
                        >
                           Predict Again
                        </button>
                     </div>
                  </>
               ) : (
                  <div>
                     {files?.length > 0 && (
                        <button
                           className=' w-full bg-blue-400 py-3 rounded-xl text-white mt-8'
                           onClick={() => {
                              predict()
                           }}
                        >
                           {isPredicting ? 'Predicting ... ' : 'Classify Cancer'}
                        </button>
                     )}
                  </div>
               )}
            </div>
         </div>
      </div>
   )
}
